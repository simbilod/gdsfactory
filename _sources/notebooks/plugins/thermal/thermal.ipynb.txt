{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Thermal\n",
    "\n",
    "gdsfactory has an FEM plugin that you can use for thermal simulations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import gmsh\n",
    "import gdsfactory as gf\n",
    "from gdsfactory.simulation.gmsh.mesh import create_physical_mesh\n",
    "from gdsfactory.simulation.thermal import solve_thermal\n",
    "from gdsfactory.generic_tech import get_generic_pdk\n",
    "from gdsfactory.technology import LayerStack, LayerLevel\n",
    "import meshio\n",
    "from skfem.io import from_meshio\n",
    "\n",
    "gf.config.rich_output()\n",
    "PDK = get_generic_pdk()\n",
    "PDK.activate()\n",
    "\n",
    "gf.generic_tech.LAYER_STACK.layers[\"heater\"].thickness = 0.13\n",
    "gf.generic_tech.LAYER_STACK.layers[\"heater\"].zmin = 2.2\n",
    "\n",
    "heater = gf.components.straight_heater_metal(length=50, heater_width=2)\n",
    "heater"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(gf.generic_tech.LAYER_STACK.layers.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "filtered_layerstack = LayerStack(\n",
    "    layers={\n",
    "        k: gf.pdk.get_layer_stack().layers[k]\n",
    "        for k in (\n",
    "            \"slab90\",\n",
    "            \"core\",\n",
    "            \"via_contact\",\n",
    "            'heater'\n",
    "        )\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "filename = \"mesh\"\n",
    "\n",
    "def mesh_with_physicals(mesh, filename):\n",
    "    mesh_from_file = meshio.read(f\"{filename}.msh\")\n",
    "    return create_physical_mesh(mesh_from_file, \"triangle\", prune_z=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "mesh = heater.to_gmsh(\n",
    "    type=\"uz\",\n",
    "    xsection_bounds=[(4, -4), (4, 4)],\n",
    "    layer_stack=filtered_layerstack,\n",
    "    filename=f\"{filename}.msh\",\n",
    ")\n",
    "mesh = mesh_with_physicals(mesh, filename)\n",
    "mesh = from_meshio(mesh)\n",
    "mesh.draw().plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "FIXME!\n",
    "\n",
    "```python\n",
    "\n",
    "solve_thermal(\n",
    "    mesh_filename=\"mesh.msh\",\n",
    "    thermal_conductivity={\"heater\": 28, \"oxide\": 1.38, \"core\": 148},\n",
    "    specific_conductivity={\"heater\": 2.3e6},\n",
    "    thermal_diffusivity={\n",
    "        \"heater\": 28 / 598 / 5240,\n",
    "        \"oxide\": 1.38 / 709 / 2203,\n",
    "        \"core\": 148 / 711 / 2330,\n",
    "    },\n",
    "    # specific_heat={\"(47, 0)_0\": 598, 'oxide': 709, '(1, 0)': 711},\n",
    "    # density={\"(47, 0)_0\": 5240, 'oxide': 2203, '(1, 0)': 2330},\n",
    "    currents={\"heater\": 0.007},\n",
    ")\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example based on [femwell](https://helgegehring.github.io/femwell/index.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from collections import OrderedDict\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from shapely.geometry import LineString, Polygon\n",
    "from skfem import Basis, ElementTriP0\n",
    "from skfem.io import from_meshio\n",
    "from tqdm import tqdm\n",
    "\n",
    "from femwell.mesh import mesh_from_OrderedDict\n",
    "from femwell.mode_solver import compute_modes, plot_mode\n",
    "from femwell.thermal import solve_thermal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "w_sim = 8 * 2\n",
    "h_clad = 2.8\n",
    "h_box = 1\n",
    "w_core = 0.5\n",
    "h_core = 0.22\n",
    "offset_heater = 2.2\n",
    "h_heater = 0.14\n",
    "w_heater = 2\n",
    "\n",
    "polygons = OrderedDict(\n",
    "    bottom=LineString([(-w_sim / 2, -h_core / 2 - h_box), (w_sim / 2, -h_core / 2 - h_box)]),\n",
    "    core=Polygon(\n",
    "        [\n",
    "            (-w_core / 2, -h_core / 2),\n",
    "            (-w_core / 2, h_core / 2),\n",
    "            (w_core / 2, h_core / 2),\n",
    "            (w_core / 2, -h_core / 2),\n",
    "        ]\n",
    "    ),\n",
    "    heater=Polygon(\n",
    "        [\n",
    "            (-w_heater / 2, -h_heater / 2 + offset_heater),\n",
    "            (-w_heater / 2, h_heater / 2 + offset_heater),\n",
    "            (w_heater / 2, h_heater / 2 + offset_heater),\n",
    "            (w_heater / 2, -h_heater / 2 + offset_heater),\n",
    "        ]\n",
    "    ),\n",
    "    clad=Polygon(\n",
    "        [\n",
    "            (-w_sim / 2, -h_core / 2),\n",
    "            (-w_sim / 2, -h_core / 2 + h_clad),\n",
    "            (w_sim / 2, -h_core / 2 + h_clad),\n",
    "            (w_sim / 2, -h_core / 2),\n",
    "        ]\n",
    "    ),\n",
    "    box=Polygon(\n",
    "        [\n",
    "            (-w_sim / 2, -h_core / 2),\n",
    "            (-w_sim / 2, -h_core / 2 - h_box),\n",
    "            (w_sim / 2, -h_core / 2 - h_box),\n",
    "            (w_sim / 2, -h_core / 2),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "resolutions = dict(\n",
    "    core={\"resolution\": 0.04, \"distance\": 1},\n",
    "    clad={\"resolution\": 0.6, \"distance\": 1},\n",
    "    box={\"resolution\": 0.6, \"distance\": 1},\n",
    "    heater={\"resolution\": 0.1, \"distance\": 1},\n",
    ")\n",
    "\n",
    "mesh = from_meshio(mesh_from_OrderedDict(polygons, resolutions, default_resolution_max=0.6))\n",
    "mesh.draw().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "f9aab3c5d771b34260c96e93c5e8b06eadc8db6bfb58580f0c5b3c9174af4b1f"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
