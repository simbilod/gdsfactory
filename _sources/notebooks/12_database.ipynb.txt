{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Database\n",
    "\n",
    "This notebook shows how to use a database for storing and loading simulation results.\n",
    "The interface employs [SQLAlchemy](https://www.sqlalchemy.org/), which is installed if you supplied the `[database]` option during gdsfactory installation.\n",
    "\n",
    "```\n",
    "pip install gdsfactory[database]\n",
    "```\n",
    "\n",
    "The idea is to store simulation, fabrication and measurement data.\n",
    "\n",
    "![database](https://i.imgur.com/6A6Xo8C.jpg)\n",
    "\n",
    "\n",
    "## Overview\n",
    "\n",
    "1. You can create an ad-hoc SQLite database, which will store data in a single file (`database.db` in this case) or use the PostgreSQL Docker image for more robust self-hosted handling as an example. This method may be easily be extended for multiple users.\n",
    "2. We add wafer and component data to the database\n",
    "3. We add simulation data to the database\n",
    "4. For a more scalable database you can use Litestream. This _streams_ the SQLite database to Amazon, Azure, Google Cloud or a similar online database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sqlalchemy import text\n",
    "from sqlalchemy.orm import Session\n",
    "\n",
    "import gdsfactory.database as gd\n",
    "from gdsfactory.database import create_engine\n",
    "import gdsfactory as gf\n",
    "from gdsfactory.generic_tech import get_generic_pdk\n",
    "\n",
    "gf.config.rich_output()\n",
    "PDK = get_generic_pdk()\n",
    "PDK.activate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`gm.metadata` houses the gdsfactory-specific models. These are effectively SQLAlchemy commands.\n",
    "\n",
    "SQLite should work out-of-the-box and generates a `.db` file storing the database.\n",
    "\n",
    "As an example, a more robust database for multiple users may be implemented with [PostgreSQL](https://www.postgresql.org/). With Docker, one may simply run\n",
    "```bash\n",
    "docker run --name gds-postgresql -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -e POSTGRES_USER=user -d postgres\n",
    "```\n",
    "and connect to `localhost:5432` for a database. Setting this up on a server with a more persistent config using [Docker Compose](https://docs.docker.com/compose/) is recommended."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///database.db\", echo=True, future=True)\n",
    "#engine = create_engine(\"postgresql://user:mysecretpassword@localhost\", echo=True, future=True)\n",
    "gd.metadata.create_all(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "c = gf.components.ring_single(radius=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "with Session(engine) as session:\n",
    "    w1 = gd.Wafer(name=\"12\", serial_number=\"ABC\")\n",
    "    r1 = gd.Reticle(name=\"sky1\", wafer_id=w1.id, wafer=w1)\n",
    "    d1 = gd.Die(name=\"d00\", reticle_id=r1.id, reticle=r1)\n",
    "    c1 = gd.Component(name=c.name, die_id=d1.id, die=d1)\n",
    "\n",
    "    component_settings = []\n",
    "\n",
    "    for key, value in c.settings.changed.items():\n",
    "        s = gd.ComponentInfo(component=c1, component_id=c1.id, name=key, value=value)\n",
    "        component_settings.append(s)\n",
    "\n",
    "    for port in c.ports.values():\n",
    "        s = gd.Port(\n",
    "            component=c1,\n",
    "            component_id=c1.id,\n",
    "            port_type=port.port_type,\n",
    "            name=port.name,\n",
    "            orientation=port.orientation,\n",
    "            position=port.center,\n",
    "        )\n",
    "        component_settings.append(s)\n",
    "\n",
    "    # add objects\n",
    "    session.add_all([w1, r1, d1, c1])\n",
    "    #session.add_all(component_settings)\n",
    "\n",
    "    # flush changes to the database\n",
    "    session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Querying the database\n",
    "\n",
    "In this section, we show different ways to query the database using SQLAlchemy.\n",
    "\n",
    "Individual rows of a selected model, in this case `Wafer`, from the database are fetched as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "with Session(engine) as session:\n",
    "\n",
    "    # Two ways to do the same thing\n",
    "    for wafer in session.query(gd.Wafer):\n",
    "        print(wafer.name, wafer.serial_number)\n",
    "\n",
    "    for wafer_name, wafer_serial in session.query(gd.Wafer.name, gd.Wafer.serial_number):\n",
    "        print(wafer_name, wafer_serial)\n",
    "\n",
    "    # Get the `Wafer` from a child `Reticle`\n",
    "    for reticle in session.query(gd.Reticle).all():\n",
    "        print(reticle.name, reticle.wafer.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Manual SQL commands may naturally be used as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Notice how this is different from session\n",
    "with engine.connect() as connection:\n",
    "\n",
    "    if engine.dialect.name == 'postgresql':\n",
    "        # Using postgresql type casting\n",
    "        cursor = connection.execute(text('SELECT * FROM wafer WHERE name = 12::text'))\n",
    "    else:\n",
    "        cursor = connection.execute(text('SELECT * FROM wafer WHERE name is 12'))\n",
    "    for row in cursor:\n",
    "        print(row)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding simulation results\n",
    "\n",
    "\n",
    "TODO\n",
    "```\n",
    "- [ ] Use results to add data for a chip\n",
    "\n",
    "```\n",
    "\n",
    "\n",
    "Lets assume your chip has sinusoidal data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import gdsfactory.simulation.gtidy3d as gt\n",
    "\n",
    "# with Session(engine) as session:\n",
    "\n",
    "#     for wavelength in (1.2, 1.4, 1.55):\n",
    "\n",
    "#         strip = gt.modes.Waveguide(\n",
    "#             wavelength=wavelength,\n",
    "#             wg_width=0.5,\n",
    "#             wg_thickness=0.22,\n",
    "#             slab_thickness=0.0,\n",
    "#             ncore=\"si\",\n",
    "#             nclad=\"sio2\",\n",
    "#         )\n",
    "#         strip.compute_modes()\n",
    "#         strip.schema()\n",
    "\n",
    "#         # gm.ComputedResult(\n",
    "#         #     strip.neffs, strip.nmodes\n",
    "#         # )\n",
    "\n",
    "#         session.add(gm.Result(name='WG', type='Waveguide', value=strip))\n",
    "\n",
    "#     session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sparameters example\n",
    "\n",
    "Let's simulate S-parameters with `meep` and store the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import gdsfactory.simulation.gmeep as gmeep\n",
    "\n",
    "with Session(engine) as session:\n",
    "    component = gf.components.mmi1x2()\n",
    "    s_params = gmeep.write_sparameters_meep(\n",
    "        component=component,\n",
    "        run=True,\n",
    "        wavelength_start=1.5,\n",
    "        wavelength_stop=1.6,\n",
    "        wavelength_points=2,\n",
    "    )\n",
    "\n",
    "    # The result below stores a JSON, these are supported in SQLite\n",
    "    # and should be efficient to query in PostgreSQL\n",
    "    # Some serialisation was done with `GdsfactoryJSONEncoder`\n",
    "    session.add(gd.SParameterResults(array=s_params, n_ports=int(math.sqrt(len(s_params) - 1))))\n",
    "\n",
    "    session.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interesting queries might include filtering numerical quantities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with Session(engine) as session:\n",
    "\n",
    "    # here .all() returns other data than the name as well\n",
    "    for row in session.query(gd.SParameterResults).all():\n",
    "        print(row.array)\n",
    "\n",
    "    # for row in session.query(gd.SParameterResults.array).filter(\n",
    "    #     gd.SParameterResults.array['wavelengths'][0].astext.cast(float) > 1.4\n",
    "    # ).all():\n",
    "    #     print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with Session(engine) as session:\n",
    "\n",
    "    # here .all() returns other data than the name as well\n",
    "    for row in session.query(gd.ComputedResult.name.label(\"TODO\")).all():\n",
    "        print(row)\n",
    "\n",
    "    for row in session.query(gd.ComputedResult.value).filter(\n",
    "        gd.ComputedResult.value >= 2\n",
    "    ).all():\n",
    "        print(row)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "nbsphinx": {
   "execute": "never"
  },
  "vscode": {
   "interpreter": {
    "hash": "d4d1e4263499bec80672ea0156c357c1ee493ec2b1c70f0acce89fc37c4a6abe"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
