{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# YAML Place and AutoRoute\n",
    "\n",
    "You have two options for working with gdsfactory:\n",
    "\n",
    "1. **python flow**: you define your layout using python functions (Parametric Cells), and connect them with routing functions.\n",
    "2. **YAML Place and AutoRoute**: you define your circuit (Place and Route) in YAML. From the netlist you can simulate the circuit or generate the layout.\n",
    "\n",
    "\n",
    "YAML is a human readable version of JSON that you can use to define components placements and routes\n",
    "\n",
    "to define a a YAML Component you need to define:\n",
    "\n",
    "- instances: with each instance setting\n",
    "- placements: with X and Y\n",
    "\n",
    "And optionally:\n",
    "\n",
    "- routes: between instance ports\n",
    "- connections: to connect instance ports to other ports (without routes)\n",
    "- ports: define input and output circuit ports\n",
    "\n",
    "\n",
    "When running this tutorial make sure you UNCOMMENT this line `%matplotlib widget` so you can see the changes in the YAML file both in KLayout and matplotlib.\n",
    "\n",
    "`# %matplotlib widget`  -> `%matplotlib widget`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import ipywidgets\n",
    "from IPython.display import display\n",
    "\n",
    "import gdsfactory as gf\n",
    "from gdsfactory.generic_tech import get_generic_pdk\n",
    "\n",
    "gf.config.rich_output()\n",
    "PDK = get_generic_pdk()\n",
    "PDK.activate()\n",
    "\n",
    "x = ipywidgets.Textarea(rows=20, columns=480)\n",
    "\n",
    "x.value = \"\"\"\n",
    "name: sample_different_factory\n",
    "\n",
    "instances:\n",
    "    bl:\n",
    "      component: pad\n",
    "    tl:\n",
    "      component: pad\n",
    "    br:\n",
    "      component: pad\n",
    "    tr:\n",
    "      component: pad\n",
    "\n",
    "placements:\n",
    "    tl:\n",
    "        x: 200\n",
    "        y: 500\n",
    "\n",
    "    br:\n",
    "        x: 400\n",
    "        y: 400\n",
    "\n",
    "    tr:\n",
    "        x: 400\n",
    "        y: 600\n",
    "\n",
    "\n",
    "routes:\n",
    "    electrical:\n",
    "        settings:\n",
    "            separation: 20\n",
    "            layer: [31, 0]\n",
    "            width: 10\n",
    "        links:\n",
    "            tl,e3: tr,e1\n",
    "            bl,e3: br,e1\n",
    "    optical:\n",
    "        settings:\n",
    "            radius: 100\n",
    "        links:\n",
    "            bl,e4: br,e3\n",
    "\"\"\"\n",
    "\n",
    "out = ipywidgets.Output()\n",
    "display(x, out)\n",
    "\n",
    "\n",
    "def f(change, out=out):\n",
    "    try:\n",
    "        c = gf.read.from_yaml(change[\"new\"])\n",
    "        # clear_output()\n",
    "        fig = c.plot()\n",
    "        c.show(show_ports=True)\n",
    "        out.clear_output()\n",
    "    except Exception as e:\n",
    "        out.clear_output()\n",
    "        with out:\n",
    "            display(e)\n",
    "\n",
    "\n",
    "x.observe(f, \"value\")\n",
    "f({\"new\": x.value})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets start by defining the `instances` and `placements` section in YAML\n",
    "\n",
    "Lets place an `mmi_long` where you can place the `W0` port at `x=20, y=10`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: mmis\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 20\n",
    "        y: 10\n",
    "        mirror: False\n",
    "\"\"\"\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: mmi_mirror\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 20\n",
    "        y: 10\n",
    "        mirror: False\n",
    "\"\"\"\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ports\n",
    "\n",
    "You can expose any ports of any instance to the new Component with a `ports` section in YAML\n",
    "\n",
    "Lets expose all the ports from `mmi_long` into the new component.\n",
    "\n",
    "Ports are exposed as `new_port_name: instance_name, port_name`\n",
    "\n",
    "you can see the ports in `red` and subports in `blue`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: ports_demo\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: 20\n",
    "        y: 10\n",
    "        mirror: True\n",
    "        \n",
    "ports:\n",
    "    o3: mmi_long,o3\n",
    "    o2: mmi_long,o2\n",
    "    o1: mmi_long,o1\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also define a mirror placement using a port\n",
    "\n",
    "Try mirroring with other ports `o2`, `o3` or with a number as well as with a rotation `90`, `180`, `270`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: mirror_demo\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:        \n",
    "    mmi_long:\n",
    "        x: 0\n",
    "        y: 0\n",
    "        mirror: o1\n",
    "        rotation: 0\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## connections\n",
    "\n",
    "You can connect any two instances by defining a `connections` section in the YAML file.\n",
    "\n",
    "it follows the syntax.\n",
    "\n",
    "`instance_source,port : instance_destination,port`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: connections_demo\n",
    "instances:\n",
    "    b:\n",
    "      component: bend_circular\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:\n",
    "    mmi_short:\n",
    "        port: o1\n",
    "        x: 10\n",
    "        y: 20\n",
    "connections:\n",
    "    b,o1 : mmi_short,o2\n",
    "    mmi_long,o1: b, o2\n",
    "\n",
    "ports:\n",
    "    o1: mmi_short,o1\n",
    "    o2: mmi_long,o2\n",
    "    o3: mmi_long,o3\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Relative port placing**\n",
    "\n",
    "You can also place a component with respect to another instance port\n",
    "\n",
    "You can also define an x and y offset with `dx` and `dy`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: rel_port_placing\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\n",
    "placements:\n",
    "    mmi_short:\n",
    "        port: o1\n",
    "        x: 0\n",
    "        y: 0\n",
    "    mmi_long:\n",
    "        port: o1\n",
    "        x: mmi_short,o2\n",
    "        y: mmi_short,o2\n",
    "        dx : 10\n",
    "        dy: -10\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## routes\n",
    "\n",
    "You can define routes between two instances by defining a `routes` section in YAML\n",
    "\n",
    "it follows the syntax\n",
    "\n",
    "```YAML\n",
    "\n",
    "routes:\n",
    "    route_name:\n",
    "        links:\n",
    "            instance_source,port: instance_destination,port\n",
    "        settings:  # for the route (optional)\n",
    "            waveguide: strip\n",
    "            width: 1.2\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: with_routes\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 10\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "placements:\n",
    "    mmi_long:\n",
    "        x: 100\n",
    "        y: 100\n",
    "routes:\n",
    "    optical:\n",
    "        links:\n",
    "            mmi_short,o2: mmi_long,o1\n",
    "        settings:\n",
    "            cross_section:\n",
    "                cross_section: strip\n",
    "                settings:\n",
    "                    layer: [2, 0]\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can **rotate** and instance specifying the angle in degrees"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also access the routes in the newly created component"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## instances, placements, connections, ports, routes\n",
    "\n",
    "Lets combine all you learned so far.\n",
    "\n",
    "You can define the netlist connections of a component by a netlist in YAML format\n",
    "\n",
    "Note that you define the connections as `instance_source.port ->\n",
    "instance_destination.port` so the order is important and therefore you can only\n",
    "change the position of the `instance_destination`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can define several routes that will be connected using `gf.routing.get_bundle`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: connections_2x2_problem\n",
    "\n",
    "instances:\n",
    "    mmi_bottom:\n",
    "      component: mmi2x2\n",
    "    mmi_top:\n",
    "      component: mmi2x2\n",
    "\n",
    "placements:\n",
    "    mmi_top:\n",
    "        x: 100\n",
    "        y: 100\n",
    "\n",
    "routes:\n",
    "    optical:\n",
    "        links:\n",
    "            mmi_bottom,o4: mmi_top,o1\n",
    "            mmi_bottom,o3: mmi_top,o2\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also add custom component_factories to `gf.read.from_yaml`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "@gf.cell\n",
    "def pad_new(size=(100, 100), layer=gf.LAYER.WG):\n",
    "    c = gf.Component()\n",
    "    compass = c << gf.components.compass(size=size, layer=layer)\n",
    "    c.ports = compass.ports\n",
    "    return c\n",
    "\n",
    "\n",
    "gf.get_active_pdk().register_cells(pad_new=pad_new)\n",
    "c = pad_new(cache=False)\n",
    "f = c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: connections_2x2_problem\n",
    "\n",
    "instances:\n",
    "    bot:\n",
    "      component: pad_new\n",
    "    top:\n",
    "      component: pad_new\n",
    "\n",
    "placements:\n",
    "    top:\n",
    "        x: 0\n",
    "        y: 200\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: custom_routes\n",
    "\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: 200\n",
    "        y: 400\n",
    "routes:\n",
    "    electrical:\n",
    "        settings:\n",
    "            layer: [31, 0]\n",
    "            width: 10.\n",
    "            end_straight_length: 150\n",
    "        links:\n",
    "            t,e11: b,e11\n",
    "            t,e13: b,e13\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also, you can define route aliases, that have different settings and specify the route `factory` as a parameter as well as the `settings` for that particular route alias."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: sample_settings\n",
    "\n",
    "instances:\n",
    "    bl:\n",
    "      component: pad\n",
    "    tl:\n",
    "      component: pad\n",
    "    br:\n",
    "      component: pad\n",
    "    tr:\n",
    "      component: pad\n",
    "\n",
    "placements:\n",
    "    tl:\n",
    "        x: 0\n",
    "        y: 200\n",
    "\n",
    "    br:\n",
    "        x: 400\n",
    "        y: 400\n",
    "\n",
    "    tr:\n",
    "        x: 400\n",
    "        y: 600\n",
    "\n",
    "routes:\n",
    "    optical_r100:\n",
    "        settings:\n",
    "            radius: 100\n",
    "            layer: [31, 0]\n",
    "            width: 50\n",
    "        links:\n",
    "            tl,e2: tr,e2\n",
    "    optical_r200:\n",
    "        settings:\n",
    "            radius: 200\n",
    "            width: 10\n",
    "            layer: [31, 0]\n",
    "        links:\n",
    "            bl,e3: br,e3\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: 200\n",
    "        y: 500\n",
    "routes:\n",
    "    optical:\n",
    "        settings: \n",
    "            radius: 50\n",
    "            width: 40\n",
    "            layer: [31,0]\n",
    "            end_straight_length: 150\n",
    "            separation: 50\n",
    "        links:\n",
    "            t,e11: b,e11\n",
    "            t,e12: b,e12\n",
    "            t,e13: b,e13\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: 100\n",
    "        y: 1000\n",
    "routes:\n",
    "    route1:\n",
    "        routing_strategy: get_bundle_path_length_match\n",
    "        settings: \n",
    "            extra_length: 500\n",
    "            width: 2\n",
    "            layer: [31,0]\n",
    "            end_straight_length: 500\n",
    "        links:\n",
    "            t,e11: b,e11\n",
    "            t,e12: b,e12\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "instances:\n",
    "    t:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 270\n",
    "          columns: 3\n",
    "    b:\n",
    "      component: pad_array\n",
    "      settings:\n",
    "          orientation: 90\n",
    "          columns: 3\n",
    "\n",
    "placements:\n",
    "    t:\n",
    "        x: -250\n",
    "        y: 1000\n",
    "routes:\n",
    "    route1:\n",
    "        routing_strategy: get_bundle_from_waypoints\n",
    "        settings:\n",
    "            waypoints:\n",
    "                - [0, 300]\n",
    "                - [400, 300]\n",
    "                - [400, 400]\n",
    "                - [-250, 400]\n",
    "            auto_widen: False\n",
    "        links:\n",
    "            b,e11: t,e11\n",
    "            b,e12: t,e12\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that you define the connections as `instance_source.port -> instance_destination.port` so the order is important and therefore you can only change the position of the `instance_destination`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Custom factories\n",
    "\n",
    "You can leverage netlist defined components to define more complex circuits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi1x2_faba = gf.partial(gf.components.mmi1x2, length_mmi=30)\n",
    "mmi2x2_faba = gf.partial(gf.components.mmi2x2, length_mmi=30)\n",
    "gf.get_active_pdk().register_cells(mmi1x2_faba=mmi1x2_faba, mmi2x2_faba=mmi2x2_faba)\n",
    "\n",
    "x.value = \"\"\"\n",
    "name: sample_custom_cells\n",
    "instances:\n",
    "    mmit:\n",
    "      component: mmi2x2_faba\n",
    "    mmib:\n",
    "      component: mmi1x2_faba\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "placements:\n",
    "    mmit:\n",
    "        x: 100\n",
    "        y: 100\n",
    "routes:\n",
    "    route1:\n",
    "        links:\n",
    "            mmib,o2: mmit,o2\n",
    "            \n",
    "ports:\n",
    "    o1: mmib,o1\n",
    "    o2: mmit,o2\n",
    "    o3: mmit,o3\n",
    "    o4: mmit,o4\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mzi()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = c.get_netlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(c.get_netlist().keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## variables\n",
    "\n",
    "\n",
    "You can define a global variables `settings` in your YAML file, and use the variable in the other YAML settings by using `${settings.length_mmi}`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "settings:\n",
    "    length_mmi: 10\n",
    "\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: ${settings.length_mmi}\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: 5\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# `cell_from_yaml_template`: Jinja-template-based Parser\n",
    "An optional parser variant is also available which is capable of parsing jinja templating directives within the yaml-based cells. This can give python-like flexibility inside the otherwise declaratively-defined yaml circuit syntax."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gdsfactory.read import cell_from_yaml_template\n",
    "from IPython.display import Code\n",
    "gf.clear_cache()\n",
    "\n",
    "jinja_yaml = \"\"\"\n",
    "default_settings:\n",
    "    length_mmi:\n",
    "      value: 10\n",
    "      description: \"The length of the long MMI\"\n",
    "    width_mmi:\n",
    "      value: 5\n",
    "      description: \"The width of both MMIs\"\n",
    "\n",
    "instances:\n",
    "    mmi_long:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: {{ width_mmi }}\n",
    "        length_mmi: {{ length_mmi }}\n",
    "    mmi_short:\n",
    "      component: mmi1x2\n",
    "      settings:\n",
    "        width_mmi: {{ width_mmi }}\n",
    "        length_mmi: 5\n",
    "connections:\n",
    "    mmi_long,o2: mmi_short,o1\n",
    "   \n",
    "ports:\n",
    "    o1: mmi_long,o1\n",
    "    o2: mmi_short,o2\n",
    "    o3: mmi_short,o3\n",
    "\"\"\"\n",
    "pic_filename = \"demo_jinja.pic.yml\"\n",
    "\n",
    "with open(pic_filename, mode='w') as f:\n",
    "    f.write(jinja_yaml)\n",
    "\n",
    "pic_cell = cell_from_yaml_template(pic_filename, name='demo_jinja')\n",
    "gf.get_active_pdk().register_cells(demo_jinja=pic_cell)  # let's register this cell so we can use it later\n",
    "Code(filename=pic_filename, language=\"yaml+jinja\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You'll see that this generated a python function, with a real signature, default arguments, docstring and all!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pic_cell?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can invoke this cell without arguments to see the default implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pic_cell()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you can provide arguments explicitly, like a normal cell. Note however that yaml-based cells **only accept keyword arguments**, since yaml dictionaries are inherently unordered."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pic_cell(length_mmi=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The power of jinja-templated cells become more apparent with more complex cells, like the following."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gf.clear_cache()\n",
    "\n",
    "jinja_yaml = \"\"\"\n",
    "default_settings:\n",
    "    length_mmis:\n",
    "      value: [10, 20, 30, 100]\n",
    "      description: \"An array of mmi lengths for the DOE\"\n",
    "    spacing_mmi:\n",
    "      value: 50\n",
    "      description: \"The vertical spacing between adjacent MMIs\"\n",
    "    mmi_component:\n",
    "      value: mmi1x2\n",
    "      description: \"The mmi component to use\"\n",
    "\n",
    "instances:\n",
    "{% for i in range(length_mmis|length)%}\n",
    "    mmi_{{ i }}:\n",
    "      component: {{ mmi_component }}\n",
    "      settings:\n",
    "        width_mmi: 4.5\n",
    "        length_mmi: {{ length_mmis[i] }}\n",
    "{% endfor %}\n",
    "\n",
    "placements:\n",
    "{% for i in range(1, length_mmis|length)%}\n",
    "    mmi_{{ i }}:\n",
    "      port: o1\n",
    "      x: mmi_0,o1\n",
    "      y: mmi_0,o1\n",
    "      dy: {{ spacing_mmi * i }}\n",
    "{% endfor %}\n",
    "\n",
    "routes:\n",
    "{% for i in range(1, length_mmis|length)%}\n",
    "    r{{ i }}:\n",
    "      routing_strategy: get_bundle_all_angle\n",
    "      links:\n",
    "        mmi_{{ i-1 }},o2: mmi_{{ i }},o1\n",
    "{% endfor %}\n",
    "\n",
    "ports:\n",
    "{% for i in range(length_mmis|length)%}\n",
    "    o{{ i }}: mmi_{{ i }},o3\n",
    "{% endfor %}\n",
    "\"\"\"\n",
    "pic_filename = \"demo_jinja_loops.pic.yml\"\n",
    "\n",
    "with open(pic_filename, mode='w') as f:\n",
    "    f.write(jinja_yaml)\n",
    "\n",
    "big_cell = cell_from_yaml_template(pic_filename, name='demo_jinja_loops')\n",
    "Code(filename=pic_filename, language=\"yaml+jinja\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bc = big_cell()\n",
    "bc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bc2 = big_cell(length_mmis=[10, 20, 40, 100, 200, 150, 10, 40], spacing_mmi=60, mmi_component=\"demo_jinja\")\n",
    "bc2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Choosing your preferred yaml parser\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, the jinja-yaml parser has a superset of the functionalities and syntax of the standard yaml parser. The one notable exception is with `settings`. When reading any yaml files with `settings` blocks, the default settings will be read and applied, but they will not be settable, as the jinja parser has a different mechanism for setting injection with the `default_settings` block and jinja2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pic_filename = \"demo_backwards_compatibility.pic.yml\"\n",
    "\n",
    "with open(pic_filename, mode='w') as f:\n",
    "    f.write(x.value)\n",
    "\n",
    "retro_cell = cell_from_yaml_template(pic_filename, name='demo_jinja_backwards_compatible')\n",
    "Code(filename=pic_filename, language=\"yaml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "retro_cell()  # this is fine-- because cell_from_yaml_template internally calls from_yaml, cells should work from their default state\n",
    "# retro_cell(length_mmi=15) # this fails-- you must use \"default_settings\" and jinja syntax with the yaml-jinja parser for settings to be settable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because of this incompatibility, you must choose one parser or another to be used by default at the scope of the PDK."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gf.get_active_pdk().circuit_yaml_parser = cell_from_yaml_template"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
