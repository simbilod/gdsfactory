name: Test pre-commit, code and docs

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: pre-commit/action@v3.0.0
  test_code:
    needs: [pre-commit]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install dependencies
        run: |
          pip install .[dev]
          make install gdslib
          gf tool install
      - name: Lint with flake8
        run: |
          flake8 .
      - name: Test with pytest
        run: pytest
  test_code_coverage_python37:
    runs-on: ubuntu-latest
    needs: [pre-commit]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          make install
      - name: Test with pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest klayout lytest scikit-image pytest-cov
          pytest --cov=gdsfactory --cov-report=xml --cov-config=.coveragerc gdsfactory
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
  test_code_plugins:
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: 3.9
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: anaconda-client-env
      - name: Add conda to system path
        run: |
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make gdslib plugins-debian
          make install
      - name: Test with pytest
        env:
          TIDY3D_USER: ${{ secrets.TIDY3D_EMAIL }}
          TIDY3D_PASS: ${{ secrets.TIDY3D_PASSWORD }}
        run: |
          mkdir -p $HOME/.tidy3d
          echo ${{ secrets.TIDY3D_AUTH }} > $HOME/.tidy3d/auth.json
          make test-plugins
      - uses: actions/upload-artifact@v3
        with:
          name: requirements
          path: requirements.txt
  test_docs:
    needs: [pre-commit]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: 3.9
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: anaconda-client-env
      - name: Add conda to system path
        run: |
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          sudo apt install pandoc
          sudo apt install libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev
          make gdslib plugins-debian full
      - name: Test documentation
        env:
          TIDY3D_USER: ${{ secrets.TIDY3D_EMAIL }}
          TIDY3D_PASS: ${{ secrets.TIDY3D_PASSWORD }}
          DISPLAY: 1.0
        run: |
          mkdir -p $HOME/.tidy3d
          echo ${{ secrets.TIDY3D_AUTH }} > $HOME/.tidy3d/auth.json
          cd docs
          make html
